version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/9T6udeKYS1UtTayGniEzd/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if(( $SUCCESS==2 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

orbs: 
  slack: circleci/slack@4.10.1
            
jobs:
  send-notification:
      description: Send custom notification to slack when a job fails and succeeds.   
      docker:
        - image: 'cimg/base:stable'
      steps:
        - slack/notify:
            custom: |
              {
                "text": "CircleCI job Notification.",
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "Job Failed. :red_circle:",
                      "emoji": true
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Job*: ${CIRCLE_JOB}"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Branch*: $CIRCLE_BRANCH"
                      }
                    ],
                    "accessory": {
                      "type": "image",
                      "image_url": "https://cdn.freebiesupply.com/logos/large/2x/udacity-logo-png-transparent.png",
                      "alt_text": "Udacity logo"
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Mentions*: $SLACK_PARAM_MENTIONS"
                      }
                    ]
                  },
                  {
                    "type": "actions",
                    "elements": [
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "View Job"
                        },
                        "url": "${CIRCLE_BUILD_URL}"
                      }
                    ]
                  }
                ]
              }
            event: fail
            # mentions: "@UdaPeopleDevTeam"
        - slack/notify:
            event: pass
            # mentions: "@UdaPeopleDevTeam"
            custom: |
              {
                "text": "CircleCI job Notification.",
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "Job Succeeded. :white_check_mark:",
                      "emoji": true
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Job*: ${CIRCLE_JOB}"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Branch*: $CIRCLE_BRANCH"
                      }
                    ],
                    "accessory": {
                      "type": "image",
                      "image_url": "https://cdn.freebiesupply.com/logos/large/2x/udacity-logo-png-transparent.png",
                      "alt_text": "Udacity logo"
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Mentions*: $SLACK_PARAM_MENTIONS"
                      }
                    ]
                  },
                  {
                    "type": "actions",
                    "elements": [
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "View Job"
                        },
                        "url": "${CIRCLE_BUILD_URL}"
                      }
                    ]
                  }
                ]
              }

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build  
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
            #  exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacity" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
  
  configure-infrastructure:
    docker:
      - image: 'alpine:latest'
    steps:
      - checkout
      - add_ssh_key:
          fingerprints: ["8d:c6:87:f3:64:3f:da:0e:f0:64:c7:52:c9:24:12:5e"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            yum install -y ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.tx
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/9T6udeKYS1UtTayGniEzd/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            else
              echo "Migration failed"
            fi

  deploy-frontend:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            yum install -y ansible
            yum install -y python3
            yum install -y nodejs
            yum install -y npm
            yum install -y aws-cli
            yum install -y tar gzip
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations        
                    
  deploy-backend:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - add_ssh_key:
          fingerprints: ["8d:c6:87:f3:64:3f:da:0e:f0:64:c7:52:c9:24:12:5e"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            yum install -y ansible
            yum install -y python3
            yum install -y nodejs
            yum install -y npm
            yum install -y aws-cli
            yum install -y tar gzip
      - run:
          name: Deploy backend
          command: |
            #cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz . 
            ls -a
            echo "Contents  of the inventory.txt file is -------"
            cat ./.circleci/ansible/inventory.txt
            ansible-playbook -i ./.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml \
            --ssh-common-args='-o StrictHostKeyChecking=no'
      - destroy-environment
      - revert-migrations 



workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [build-backend, build-frontend]
     
          
      